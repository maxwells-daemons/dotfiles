""" ~/.vim/vimrc
" Complete config for vanilla Vim, and initial config for Neovim.
" Defines sensible defaults and keybindings.
" Mostly from https://github.com/tpope/vim-sensible.

set nocompatible

""" Mappings
" Use <Space> as the leader
let mapleader = "\<Space>"

" <C-/> (Option-/ on MacOS) clears the search highlight
nnoremap <silent> <C-_> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>
nnoremap <silent> ÷ :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>

" Move between splits with <Ctrl>-HJKL
nmap <C-h> <C-W>h
nmap <C-j> <C-W>j
nmap <C-k> <C-W>k
nmap <C-l> <C-W>l

" Cycle buffers with <Alt>-HL (<Option>-HL on MacOS)
nmap <A-h> :bnext<CR>
nmap <A-l> :bprevious<CR>
nmap ¬ :bnext<CR>
nmap ˙ :bprevious<CR>

" Make Y work like C and D
nmap Y y$

" Stay in visual mode when indenting visual selections
xnoremap > >gv
xnoremap < <gv

" Allow backspacing over everything in insert mode.
set backspace=indent,eol,start

" Set 100ms timeout for keycodes
set ttimeout
set ttimeoutlen=100

" Don't use Ex mode, use Q for formatting
map Q gq

" Allow undo for <C-u> in insert mode
inoremap <C-U> <C-G>u<C-U>

" Allow using the mouse
set mouse=a

""" Whitespace
set autoindent " Autoindent new lines to current width
set smarttab " Enable smart tab
set tabstop=4 " Visual spaces per tab character
set softtabstop=4 " Spaces per soft-tab
set shiftwidth=4 " Amount to shift with < and >
set expandtab " Use <TAB> to insert spaces

""" History
set history=200 " Keep 200 lines of command line history

" Persist undo history across sessions
set undofile

if !has('nvim')
    set undodir=~/.vim/undo
endif

""" Completion
" Don't scan included files for completion
set complete-=i

""" Search
set hlsearch " Highlight search matches
set ignorecase smartcase " Only capital searches are case-sensitive
set gdefault " Replaces are global by default

" Do "verymagic" search by default, which aligns better with other regexes
nnoremap / /\v
nnoremap ? ?\v

""" Wildmenu
set wildmenu  " Show completion matches in status line
set wildmode=longest:full,full  " Bash-like wildmenu tab completion

""" Aesthetics
set termguicolors " Enable 24-bit color in terminal
set ruler " Show the cursor position
set showcmd  " Show partial commands in the bottom bar
set number relativenumber " Show absolute+relative numbers
set cursorline " Highlight the cursor line
set colorcolumn=80 " Color column 80
set noerrorbells novisualbell " Disable bell on error
set display=truncate " Show when the file is truncated
let g:tex_conceal="" " Disable latex symbol conversion
set title " Set the window title to the current filename

" Do incremental searching when it's possible to timeout.
if has('reltime')
  set incsearch
endif

" Default colorscheme for plain vim
if !has('nvim')
    colorscheme desert
endif

""" Misc
set laststatus=2 " Always show status bar
set scrolloff=5 " Always show 5 lines on each side of the cursor
set sidescrolloff=5 " Always show 5 characters on each side of the cursor
set autoread " Automatically reload a file when it has been changed outside of vim
set hidden " Allow backgrounding unsaved buffers
set lazyredraw " Don't redraw screen while executing a macro for speed
set nrformats-=octal " Do not recognize octal numbers for Ctrl-A and Ctrl-X
filetype plugin indent on " Enable filetype detection
set nolangremap " Prevent langremap from modifying inserted characters

" Enable syntax highlighting when the terminal has colors
if &t_Co > 2 || has("gui_running")
    syntax on
endif

" Use system clipboard if available
if has('clipboard')
    set clipboard=unnamed
    set clipboard+=unnamedplus
endif

" Delete comment character when joining commented lines
if v:version > 703 || v:version == 703 && has("patch541")
    set formatoptions+=j 
endif

" Save files by overwriting; prevents duplicate notifications
" See: https://superuser.com/questions/1543754/stop-entr-from-running-twice-when-file-is-saved-from-vim
set backupcopy=yes

" Save all-caps global variables between sessions; dependency for some plugins
if !has('nvim') && !empty(&viminfo)
    set viminfo^=!
endif

" Store viminfo in ~/.vim/viminfo
set viminfofile=~/.vim/viminfo

" Ensure './tags;' is in the tag file list
if has('path_extra')
    setglobal tags-=./tags tags-=./tags; tags^=./tags;
endif 

" Don't save global options between sessions or views
set sessionoptions-=options
set viewoptions-=options

" Load matchit.vim, but only if the user hasn't installed a newer version.
" This plugin lets us jump between open/close parens, if/endif, ...
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
    runtime! macros/matchit.vim
endif

" Workaround for Kitty rendering bug 
" (See: https://github.com/kovidgoyal/kitty/issues/108)
let &t_ut=''

" Add multi-line movement to jump list
nnoremap <expr> k (v:count > 1 ? "m'" . v:count : '') . 'k'
nnoremap <expr> j (v:count > 1 ? "m'" . v:count : '') . 'j'

" Disable arabic shaping to improve performance
if has('arabic')
    set noarabicshape
endif

" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid, when inside an event handler
" (happens when dropping a file on gvim) and for a commit message (it's
" likely a different one than last time).
autocmd BufReadPost *
  \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
  \ |   exe "normal! g`\""
  \ | endif
